<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/http.proto

namespace Hrana\Http;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>hrana.http.StreamResult</code>
 */
class StreamResult extends \Google\Protobuf\Internal\Message
{
    protected $result;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Hrana\Http\StreamResponse $ok
     *     @type \Hrana\Error $error
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Proto\Http::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.hrana.http.StreamResponse ok = 1;</code>
     * @return \Hrana\Http\StreamResponse|null
     */
    public function getOk()
    {
        return $this->readOneof(1);
    }

    public function hasOk()
    {
        return $this->hasOneof(1);
    }

    /**
     * Generated from protobuf field <code>.hrana.http.StreamResponse ok = 1;</code>
     * @param \Hrana\Http\StreamResponse $var
     * @return $this
     */
    public function setOk($var)
    {
        GPBUtil::checkMessage($var, \Hrana\Http\StreamResponse::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.hrana.Error error = 2;</code>
     * @return \Hrana\Error|null
     */
    public function getError()
    {
        return $this->readOneof(2);
    }

    public function hasError()
    {
        return $this->hasOneof(2);
    }

    /**
     * Generated from protobuf field <code>.hrana.Error error = 2;</code>
     * @param \Hrana\Error $var
     * @return $this
     */
    public function setError($var)
    {
        GPBUtil::checkMessage($var, \Hrana\Error::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getResult()
    {
        return $this->whichOneof("result");
    }

}

